Социальная служба:

1) Как мы планируем общаться с Population:

- Есть метод getStaffDemand(), возвращающий желаемое количество рабочих в виде целого числа 
	(желать мы хотим наверное всегда одно и то же: на каждые 2000 людей 50психологов и 10 ученых)
	
- Есть поле класса vector<Human*> staff. Эта штуковина логически обозначает базу данных с нашили работниками. 
	С помощью этой штуки мы планируем контролировать количество работников. Соответвенно проверяем, если человек умер - то выкидываем референс.
	Population будет добавлять в этот массив референсы на новых работников.

2) Работа самой службы

- Есть поле класса priority_queue<Human*, vector<Human*>, ComparePersonsByMentalHealth> clients - это люди, которым нужна помощь.
	Соответсвенно отсюда будут откусываться первые N человек, которых психологи успели полечить за год. 
	Сами психологи тоже попадают в этот список, но это уже совсем внутренняя логика

- На начальном уровне служба не страдает от катастроф, они только отражаются на состоянии людей (ухудшают метальное здоровье)

3) Обработка населения

- Огромный жирный метод, обрабатывающий массив людей прямиком из класса Population. На начальном этапе планируется ухудшение/улучшение морального состояния человеков
	( как ухудшать - мы знаем, а как улечшать - пока нет)))) )
	
- Также мы обновляем всем время обучения. Все учатся 5 лет на свои профессии. 
	После окончания учебы в соответсвующем поле указывается, что человек способен к работе.
	Человек либо учиться, либо работает, либо ни то, ни то вместе, другого не дано.

- Моральное здоровье будет прямопропорцианально влиять на способность работы. 
	Просим другие службы учитывать аднный аспект, когда применяют рабочую силу.
	Моральное здоровье измеряется по шкале 100 => если у человека оно менее 30 - пропадает способноть к учебе, меньше 20 - к работе
							если меньше 3 - человек совершает самоубийство (грустно)

4) Остальное ещё в стадии придумки, мы стараемся работать как можно быстрее)
